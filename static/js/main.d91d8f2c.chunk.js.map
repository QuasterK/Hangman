{"version":3,"sources":["Components/Alphabet.js","Components/GuessWord.js","Components/MistakesCounter.js","Components/Gallows.js","Components/Home.js","App.js","serviceWorker.js","reducers/alphabetReducer.js","reducers/guessWordReducer.js","reducers/startGameReducer.js","reducers/gameOverReducer.js","store.js","index.js"],"names":["Alphabet","handleStart","_this","props","start_game","letters","wordToGuess","guessWord","toUpperCase","signs","usedLetters","concat","Object","toConsumableArray","filter","item","newArray","includes","remain_letters","count_letters","length","handleClick","e","deactivate_letter","target","innerText","use_letter","remainLetters","word","remain","letter","mistake","numberOfMistakes","game_over","lettersToGuess","_this2","this","alphabet","map","i","react_default","a","createElement","key","className","clicked","onClick","startGame","Component","connect","state","numberOfLettersToGuess","start","dispatch","type","count","gameOver","GuessWord","fetch","then","res","json","new_quote","quote","body","new_author","author","guess","MistakesCounter","toGuess","Gallows","Home","handleNewGame","new_game","Components_GuessWord","Components_Alphabet","Components_MistakesCounter","Components_Gallows","App","Components_Home","Boolean","window","location","hostname","match","initState","alphabetReducer","arguments","undefined","action","newLettersArray","objectSpread","newUsedLettersArray","guessWordReducer","startGameReducer","gameOverReducer","appReducer","combineReducers","store","createStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d91d8f2c.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport '../scss/Alphabet.scss'\n\nclass Alphabet extends Component {\n    handleStart = () =>{\n        this.props.start_game(true);\n\n        // creating array of letters used in guessing word\n        let wordToGuess = this.props.guessWord.toUpperCase();\n        let letters;\n        //array of signs\n        let signs = this.props.usedLetters.concat(' ') ;\n        //filter only letters from sentence\n        letters = [...wordToGuess].filter(item => {\n            let newArray;\n            if (!signs.includes(item)){\n                newArray = item;\n                return newArray;\n            }\n            return newArray;\n        })\n        //dispatching letters to store\n        this.props.remain_letters(letters);\n        //dispatching number of letters to guess\n        this.props.count_letters(letters.length)\n    };\n    handleClick = e => {\n        //deleting chosen letter from array\n        this.props.deactivate_letter(e.target.innerText);\n\n        //use letter\n        this.props.use_letter(e.target.innerText);\n\n        // creating array of ungeussed and remained number of letters to guess\n        let word = this.props.remain;\n        let remainLetters;\n        if (word.includes(e.target.innerText)) {\n            remainLetters = word.filter(letter => {\n                return letter !== e.target.innerText\n            });\n            this.props.remain_letters(remainLetters);\n            this.props.count_letters(remainLetters.length);\n        }else{\n            //number of mistakes\n            this.props.mistake(this.props.numberOfMistakes + 1);\n        }\n\n        //checking if number of mistakes equal 4 - game over\n        if(this.props.numberOfMistakes === 4){\n            this.props.game_over(true);\n        }\n\n        //win game\n        if(this.props.lettersToGuess === 0){\n            this.props.game_over(true)\n        }\n\n    };\n\n    render() {\n\n        //creating array of letters\n        let arrayOfLetters = this.props.alphabet;\n        let letters = arrayOfLetters.map((letter, i) => {\n            return <div key={i} className={letter.clicked === true ? 'letter-clicked' : 'letter-active'}\n                        onClick={this.handleClick}> {letter.letter}</div>\n        });\n\n        //displaying alphabet\n        return (\n            <div className='alphabet-container'>\n                {this.props.startGame === true ? <div>{letters}</div> : <div className='alphabet-startButton' onClick={this.handleStart}>START GAME</div>}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        alphabet: state.alphabet.letters,\n        guessWord: state.guessWord.word,\n        usedLetters: state.alphabet.usedLetters,\n        remain: state.guessWord.remainLetters,\n        numberOfLettersToGuess: state.guessWord.lettersToGuess,\n        numberOfMistakes: state.guessWord.numberOfMistakes,\n        startGame: state.start.start,\n        lettersToGuess: state.guessWord.lettersToGuess\n\n    }\n};\n\nconst mapDispatchToState = dispatch => {\n    return {\n        deactivate_letter: (letter) => {\n            dispatch({type: \"CLICKED_LETTER\", letter: letter})\n        },\n        use_letter: (letter) => {\n            dispatch({type: \"USED_LETTER\", letter: letter})\n        },\n        count_letters: (count) => {\n            dispatch({type: \"COUNT_LETTERS\", count})\n        },\n        remain_letters: (remain) => {\n            dispatch({type: \"REMAIN_LETTERS\", remain})\n        },\n        mistake: (mistake) => {\n            dispatch({type: \"MISTAKE\", mistake})\n        },\n        start_game: (start) => {\n            dispatch({type: \"START_GAME\", start})\n        },\n        game_over: (gameOver) => {\n            dispatch({type: \"GAME_OVER\", gameOver})\n        },\n    }\n};\nexport default connect(mapStateToProps, mapDispatchToState)(Alphabet);","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport \"../scss/GuessWord.scss\"\n\nclass GuessWord extends Component {\n\n    componentDidMount(){\n        fetch('https://favqs.com/api/qotd')\n            .then(res => res.json())\n            //sending quote to store\n            .then(json => {\n                this.props.new_quote(json.quote.body);\n                this.props.new_author(json.quote.author);\n            })\n    }\n    render() {\n        let guessedWord = this.props.guessWord;\n        let guess = guessedWord.map(letter => {\n           if(this.props.usedLetters.includes(letter.toUpperCase())){\n               return letter;\n           }else return '_ '\n        });\n        return (\n            <div className='guess-container'>\n                <div className='guess-board'>{guess}</div>\n                <div className='guess-author'>{this.props.author}</div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) =>{\n    return {\n        guessWord: [...state.guessWord.word],\n        usedLetters: state.alphabet.usedLetters,\n        guess: state.guessWord.lettersToGuess,\n        author: state.guessWord.author,\n    }\n};\n\nconst mapDispatchToState = dispatch =>{\n    return {\n        deactivate_letter: (letter) => {dispatch({type: \"CLICKED_LETTER\", letter:letter})},\n        count_letters: (count) => {dispatch({type: \"COUNT_LETTERS\", count})},\n        new_quote: (quote) => {dispatch({type: \"NEW_WORD\", quote})},\n        new_author: (author) => {dispatch({type: \"NEW_AUTHOR\", author})},\n\n    }\n};\nexport default connect(mapStateToProps, mapDispatchToState)(GuessWord);","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport '../scss/MistakesCounter.scss'\n\nclass MistakesCounter extends Component {\n    render(){\n        return (\n            <div className='mistake-container'>\n                <div className='mistake-description'>\n                    <span className='mistake-description text'>Number of mistakes: </span>\n                    <span className='mistake-description number'>{this.props.numberOfMistakes}</span>\n                </div>\n                <div className='mistake-lettersToGuess'>\n                    <span className='mistake-lettersToGuess text'>Number of letters to guess: </span>\n                    <span className='mistake-lettersToGuess number'>{this.props.toGuess}</span>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) =>{\n    return {\n        numberOfMistakes: state.guessWord.numberOfMistakes,\n        toGuess: state.guessWord.lettersToGuess,\n    }\n};\n\nexport default connect(mapStateToProps)(MistakesCounter);","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport '../scss/Gallows.scss'\nclass Gallows extends Component {\n    render(){\n        //displaying image of hangman\n        let mistake = this.props.numberOfMistakes;\n        return (\n            <div className='gallows-container'>\n                <div className='gallows-background'>\n                    {mistake >= 1 ? <div className='hangman-head'/> : false}\n                    {mistake >= 2 ? <div className='hangman-belly'/> : false}\n                    {mistake >= 3 ? <div className='hangman-hands'/> : false}\n                    {mistake >= 4 ? <div className='hangman-legs'/> : false}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) =>{\n    return {\n        numberOfMistakes: state.guessWord.numberOfMistakes,\n    }\n};\n\nexport default connect(mapStateToProps)(Gallows);","import React, {Component} from 'react';\nimport Alphabet from './Alphabet';\nimport GuessWord from './GuessWord';\nimport MistakesCounter from './MistakesCounter';\nimport Gallows from './Gallows';\nimport '../scss/Home.scss';\nimport {connect} from 'react-redux';\n\nclass Home extends Component {\n    handleNewGame = () => {\n        this.props.game_over(false);\n        this.props.new_game();\n    };\n\n    render() {\n\n        return (\n            <div className='home-container'>\n                <div className='logo'>HA_GMA_</div>\n\n                {this.props.gameOver ?\n                   <div className='gameOver-container'>\n                       <div className='gameOver-text'>{this.props.lettersToGuess === 0 ? \"CONGRATULATION\" : 'GAME OVER'}</div>\n                       <div className='gameOver-quote'>\"{this.props.quote}\"</div>\n                       <div className='gameOver-author'>~{this.props.author}</div>\n                       <div className='gameOver-button' onClick={this.handleNewGame}>PLAY AGAIN ? </div>\n                   </div> :\n                    (<div className='home-flex'>\n                        <div className='home-app'>\n                            <GuessWord/>\n                            <Alphabet/>\n                            <MistakesCounter/>\n                        </div>\n                        <Gallows/>\n                    </div>)\n                }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        gameOver: state.gameOver.gameOver,\n        quote: state.guessWord.word,\n        author: state.guessWord.author,\n        lettersToGuess: state.guessWord.lettersToGuess,\n    }\n};\n\nconst mapDispatchToState = dispatch => {\n    return {\n        game_over: (gameOver) => {dispatch({type: \"GAME_OVER\", gameOver})},\n        deactivate_letter: (letter) => {dispatch({type: \"CLICKED_LETTER\", letter:letter})},\n        count_letters: (count) => {dispatch({type: \"COUNT_LETTERS\", count})},\n        new_game: () => {dispatch({type:'NEW_GAME'})}\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToState)(Home);\n","import React, { Component } from 'react';\nimport Home from './Components/Home';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Home/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nconst initState = {\n    letters: [\n        {letter : 'A',\n             clicked: false},\n        {letter : 'B',\n            clicked: false},\n        {letter : 'C',\n            clicked: false},\n        {letter : 'D',\n            clicked: false},\n        {letter : 'E',\n            clicked: false},\n        {letter : 'F',\n            clicked: false},\n        {letter : 'G',\n            clicked: false},\n        {letter : 'H',\n            clicked: false},\n        {letter : 'I',\n            clicked: false},\n        {letter : 'J',\n            clicked: false},\n        {letter : 'K',\n            clicked: false},\n        {letter : 'L',\n            clicked: false},\n        {letter : 'M',\n            clicked: false},\n        {letter : 'N',\n            clicked: false},\n        {letter : 'O',\n            clicked: false},\n        {letter : 'P',\n            clicked: false},\n        {letter : 'Q',\n            clicked: false},\n        {letter : 'R',\n            clicked: false},\n        {letter : 'S',\n            clicked: false},\n        {letter : 'T',\n            clicked: false},\n        {letter : 'U',\n            clicked: false},\n        {letter : 'V',\n            clicked: false},\n        {letter : 'W',\n            clicked: false},\n        {letter : 'X',\n            clicked: false},\n        {letter : 'Y',\n            clicked: false},\n        {letter : 'Z',\n            clicked: false},\n\n    ],\n    usedLetters: ['.',',',':',';','-','_', \"'\", '\"', '?','!','/','`','~','(',')']\n};\n\nconst alphabetReducer = (state= initState, action) =>{\n    if(action.type === 'CLICKED_LETTER'){\n        let newLettersArray = state.letters.filter(letters => {\n            return action.letter !== letters.letter\n        });\n        return {\n            ...state,\n            letters: newLettersArray\n        }\n    }\n    if(action.type === 'USED_LETTER'){\n        let newUsedLettersArray = [...state.usedLetters, action.letter];\n        return {\n            ...state,\n            usedLetters: newUsedLettersArray,\n        }\n    }\n    return state\n};\n\nexport default alphabetReducer;","\nconst initState = {\n    word: ' ',\n    author: null,\n    lettersToGuess: 0,\n    remainLetters: null,\n    numberOfMistakes: 0,\n};\n\nconst guessWordReducer = (state= initState, action) =>{\n    if(action.type === 'COUNT_LETTERS'){\n        let count = action.count;\n        return {\n            ...state,\n            lettersToGuess: count,\n        }\n    }\n    if(action.type === 'REMAIN_LETTERS'){\n        return{\n            ...state,\n            remainLetters: action.remain,\n        }\n    }\n    if(action.type === 'MISTAKE'){\n        return{\n            ...state,\n            numberOfMistakes: action.mistake,\n        }\n    }\n    if(action.type === 'NEW_WORD'){\n        return {\n            ...state,\n            word: action.quote,\n        }\n    }\n    if(action.type === \"NEW_AUTHOR\"){\n        return {\n            ...state,\n            author: action.author,\n        }\n    }\n    return state\n};\n\nexport default guessWordReducer;","\nconst initState = {\n    start: false,\n\n};\n\nconst startGameReducer = (state= initState, action) => {\n    if (action.type === 'START_GAME') {\n        return {\n            ...state,\n            start: action.start,\n        };\n    }\n    return state\n};\n\nexport default startGameReducer;","\nconst initState = {\n    gameOver: false,\n\n};\n\nconst gameOverReducer = (state= initState, action) => {\n    if (action.type === 'GAME_OVER') {\n        return {\n            ...state,\n            gameOver: action.gameOver,\n        };\n    }\n    return state\n};\n\nexport default gameOverReducer;","import {createStore, combineReducers} from 'redux';\n//import reducers\nimport alphabetReducer from './reducers/alphabetReducer';\nimport guessWordReducer from './reducers/guessWordReducer';\nimport startGameReducer from \"./reducers/startGameReducer\";\nimport gameOverReducer from \"./reducers/gameOverReducer\";\n\nconst appReducer = combineReducers({\n    alphabet : alphabetReducer,\n    guessWord: guessWordReducer,\n    start: startGameReducer,\n    gameOver: gameOverReducer,\n});\n\n\n//restore initial state\nconst rootReducer = (state, action) => {\n    if (action.type === 'NEW_GAME') {\n        state = undefined\n    }\n\n    return appReducer(state, action)\n};\n\nconst store = createStore(\n    rootReducer,\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport {Provider} from 'react-redux';\n\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}