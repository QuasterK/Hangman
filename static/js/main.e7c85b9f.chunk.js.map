{"version":3,"sources":["Components/Alphabet.js","Components/GuessWord.js","Components/MistakesCounter.js","Components/Gallows.js","Components/Home.js","App.js","serviceWorker.js","reducers/alphabetReducer.js","reducers/guessWordReducer.js","reducers/startGameReducer.js","reducers/gameOverReducer.js","store.js","index.js"],"names":["Alphabet","handleStart","_this","props","start_game","letters","wordToGuess","guessWord","toUpperCase","signs","usedLetters","concat","Object","toConsumableArray","filter","item","newArray","includes","remain_letters","count_letters","length","handleClick","e","deactivate_letter","target","innerText","use_letter","remainLetters","word","remain","console","log","letter","then","game_over","mistake","numberOfMistakes","lettersToGuess","_this2","this","alphabet","map","i","react_default","a","createElement","key","className","clicked","onClick","startGame","Component","connect","state","numberOfLettersToGuess","start","dispatch","type","count","Promise","resolve","gameOver","GuessWord","fetch","res","json","new_quote","quote","body","new_author","author","guess","MistakesCounter","toGuess","Gallows","Home","handleNewGame","new_game","Components_GuessWord","Components_Alphabet","Components_MistakesCounter","Components_Gallows","App","Components_Home","Boolean","window","location","hostname","match","initState","alphabetReducer","arguments","undefined","action","newLettersArray","objectSpread","newUsedLettersArray","guessWordReducer","startGameReducer","gameOverReducer","appReducer","combineReducers","store","createStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e7c85b9f.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport '../scss/Alphabet.scss'\n\nclass Alphabet extends Component {\n\n    handleStart = () =>{\n        this.props.start_game(true);\n\n        // creating array of letters used in guessing word\n        let wordToGuess = this.props.guessWord.toUpperCase();\n        let letters;\n        //array of signs\n        let signs = this.props.usedLetters.concat(' ') ;\n        //filter only letters from sentence\n        letters = [...wordToGuess].filter(item => {\n            let newArray;\n            if (!signs.includes(item)){\n                newArray = item;\n                return newArray;\n            }\n            return newArray;\n        })\n        //dispatching letters to store\n        this.props.remain_letters(letters);\n        //dispatching number of letters to guess\n        this.props.count_letters(letters.length)\n\n    };\n\n    handleClick = e => {\n        //deleting chosen letter from array\n        this.props.deactivate_letter(e.target.innerText);\n\n        //add letter to used letters array\n        this.props.use_letter(e.target.innerText);\n\n        // creating array of ungeussed and remained number of letters to guess\n        let word = this.props.remain;\n        console.log('word:' + word)\n        let remainLetters;\n        if (word.includes(e.target.innerText)) {\n            remainLetters = word.filter(letter => {\n                return letter !== e.target.innerText\n            });\n            //create array of letters that contain the word and are unused by player\n            this.props.remain_letters(remainLetters);\n\n            this.props.count_letters(remainLetters.length)\n            //win game - promises\n                .then(remainLetters.length === 0 ? this.props.game_over(true) : console.log('nie'))\n\n        }else{\n            //number of mistakes\n            this.props.mistake(this.props.numberOfMistakes + 1)\n                .then(() =>console.log(this.props.numberOfMistakes))\n                ////checking if number of mistakes equal 4 - game over - used promises\n                .then(() => {\n                    this.props.numberOfMistakes === 4 ? this.props.game_over(true) : console.log('nie')\n                })\n        }\n\n\n        //win game\n        if(this.props.lettersToGuess === 0){\n            this.props.game_over(true)\n        }\n\n    };\n    render() {\n\n        //creating array of letters\n        let arrayOfLetters = this.props.alphabet;\n        let letters = arrayOfLetters.map((letter, i) => {\n            return <div key={i} className={letter.clicked === true ? 'letter-clicked' : 'letter-active'}\n                        onClick={this.handleClick}> {letter.letter}</div>\n        });\n\n        //displaying alphabet\n        return (\n            <div className='alphabet-container'>\n                {this.props.startGame === true ? <div>{letters}</div> : <div className='alphabet-startButton' onClick={this.handleStart}>START GAME</div>}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        alphabet: state.alphabet.letters,\n        guessWord: state.guessWord.word,\n        usedLetters: state.alphabet.usedLetters,\n        remain: state.guessWord.remainLetters,\n        numberOfLettersToGuess: state.guessWord.lettersToGuess,\n        numberOfMistakes: state.guessWord.numberOfMistakes,\n        startGame: state.start.start,\n        lettersToGuess: state.guessWord.lettersToGuess\n\n    }\n};\n\nconst mapDispatchToState = dispatch => {\n    return {\n        deactivate_letter: (letter) => {\n            dispatch({type: \"CLICKED_LETTER\", letter: letter})\n        },\n        use_letter: (letter) => {\n            dispatch({type: \"USED_LETTER\", letter: letter})\n        },\n        count_letters: (count) => {\n            dispatch({\n                type: \"COUNT_LETTERS\", count\n            });\n            return Promise.resolve()\n        },\n        remain_letters: (remain) => {\n            dispatch({type: \"REMAIN_LETTERS\", remain})\n            return Promise.resolve()\n        },\n        mistake: (mistake) => {\n            dispatch({type: \"MISTAKE\", mistake\n            });\n            return Promise.resolve()\n        },\n        start_game: (start) => {\n            dispatch({type: \"START_GAME\", start})\n        },\n        game_over: (gameOver) => {\n            dispatch({\n                type: \"GAME_OVER\", gameOver\n            });\n            return Promise.resolve()\n        },\n    }\n};\nexport default connect(mapStateToProps, mapDispatchToState)(Alphabet);","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport \"../scss/GuessWord.scss\"\n\nclass GuessWord extends Component {\n\n    componentDidMount(){\n        fetch('https://favqs.com/api/qotd')\n            .then(res => res.json())\n            //sending quote to store\n            .then(json => {\n                this.props.new_quote(json.quote.body);\n                this.props.new_author(json.quote.author);\n            })\n    }\n    render() {\n        let guessedWord = this.props.guessWord;\n        let guess = guessedWord.map(letter => {\n           if(this.props.usedLetters.includes(letter.toUpperCase())){\n               return letter;\n           }else return '_ '\n        });\n        return (\n            <div className='guess-container'>\n                <div className='guess-board'>{guess}</div>\n                <div className='guess-author'>{this.props.author}</div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) =>{\n    return {\n        guessWord: [...state.guessWord.word],\n        usedLetters: state.alphabet.usedLetters,\n        guess: state.guessWord.lettersToGuess,\n        author: state.guessWord.author,\n    }\n};\n\nconst mapDispatchToState = dispatch =>{\n    return {\n        deactivate_letter: (letter) => {dispatch({type: \"CLICKED_LETTER\", letter:letter})},\n        count_letters: (count) => {dispatch({type: \"COUNT_LETTERS\", count})},\n        new_quote: (quote) => {dispatch({type: \"NEW_WORD\", quote})},\n        new_author: (author) => {dispatch({type: \"NEW_AUTHOR\", author})},\n\n    }\n};\nexport default connect(mapStateToProps, mapDispatchToState)(GuessWord);","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport '../scss/MistakesCounter.scss'\n\nclass MistakesCounter extends Component {\n    render(){\n        return (\n            <div className='mistake-container'>\n                <div className='mistake-description'>\n                    <span className='mistake-description text'>Number of mistakes: </span>\n                    <span className='mistake-description number'>{this.props.numberOfMistakes}</span>\n                </div>\n                <div className='mistake-lettersToGuess'>\n                    <span className='mistake-lettersToGuess text'>Number of letters to guess: </span>\n                    <span className='mistake-lettersToGuess number'>{this.props.toGuess}</span>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) =>{\n    return {\n        numberOfMistakes: state.guessWord.numberOfMistakes,\n        toGuess: state.guessWord.lettersToGuess,\n    }\n};\n\nexport default connect(mapStateToProps)(MistakesCounter);","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport '../scss/Gallows.scss'\nclass Gallows extends Component {\n    render(){\n        //displaying image of hangman\n        let mistake = this.props.numberOfMistakes;\n        return (\n            <div className='gallows-container'>\n                <div className='gallows-background'>\n                    {mistake >= 1 ? <div className='hangman-head'/> : false}\n                    {mistake >= 2 ? <div className='hangman-belly'/> : false}\n                    {mistake >= 3 ? <div className='hangman-hands'/> : false}\n                    {mistake >= 4 ? <div className='hangman-legs'/> : false}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) =>{\n    return {\n        numberOfMistakes: state.guessWord.numberOfMistakes,\n    }\n};\n\nexport default connect(mapStateToProps)(Gallows);","import React, {Component} from 'react';\nimport Alphabet from './Alphabet';\nimport GuessWord from './GuessWord';\nimport MistakesCounter from './MistakesCounter';\nimport Gallows from './Gallows';\nimport '../scss/Home.scss';\nimport {connect} from 'react-redux';\n\nclass Home extends Component {\n    handleNewGame = () => {\n        this.props.game_over(false);\n        this.props.new_game();\n    };\n\n    render() {\n\n        return (\n            <div className='home-container'>\n                <div className='logo'>HA_GMA_</div>\n\n                {this.props.gameOver ?\n                   <div className='gameOver-container'>\n                       <div className='gameOver-text'>{this.props.lettersToGuess === 0 ? \"CONGRATULATION\" : 'GAME OVER'}</div>\n                       <div className='gameOver-quote'>\"{this.props.quote}\"</div>\n                       <div className='gameOver-author'>~{this.props.author}</div>\n                       <div className='gameOver-button' onClick={this.handleNewGame}>PLAY AGAIN ? </div>\n                   </div> :\n                    (<div className='home-flex'>\n                        <div className='home-app'>\n                            <GuessWord/>\n                            <Alphabet/>\n                            <MistakesCounter/>\n                        </div>\n                        <Gallows/>\n                    </div>)\n                }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        gameOver: state.gameOver.gameOver,\n        quote: state.guessWord.word,\n        author: state.guessWord.author,\n        lettersToGuess: state.guessWord.lettersToGuess,\n    }\n};\n\nconst mapDispatchToState = dispatch => {\n    return {\n        game_over: (gameOver) => {dispatch({type: \"GAME_OVER\", gameOver})},\n        deactivate_letter: (letter) => {dispatch({type: \"CLICKED_LETTER\", letter:letter})},\n        count_letters: (count) => {dispatch({type: \"COUNT_LETTERS\", count})},\n        new_game: () => {dispatch({type:'NEW_GAME'})}\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToState)(Home);\n","import React, { Component } from 'react';\nimport Home from './Components/Home';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Home/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nconst initState = {\n    letters: [\n        {letter : 'A',\n             clicked: false},\n        {letter : 'B',\n            clicked: false},\n        {letter : 'C',\n            clicked: false},\n        {letter : 'D',\n            clicked: false},\n        {letter : 'E',\n            clicked: false},\n        {letter : 'F',\n            clicked: false},\n        {letter : 'G',\n            clicked: false},\n        {letter : 'H',\n            clicked: false},\n        {letter : 'I',\n            clicked: false},\n        {letter : 'J',\n            clicked: false},\n        {letter : 'K',\n            clicked: false},\n        {letter : 'L',\n            clicked: false},\n        {letter : 'M',\n            clicked: false},\n        {letter : 'N',\n            clicked: false},\n        {letter : 'O',\n            clicked: false},\n        {letter : 'P',\n            clicked: false},\n        {letter : 'Q',\n            clicked: false},\n        {letter : 'R',\n            clicked: false},\n        {letter : 'S',\n            clicked: false},\n        {letter : 'T',\n            clicked: false},\n        {letter : 'U',\n            clicked: false},\n        {letter : 'V',\n            clicked: false},\n        {letter : 'W',\n            clicked: false},\n        {letter : 'X',\n            clicked: false},\n        {letter : 'Y',\n            clicked: false},\n        {letter : 'Z',\n            clicked: false},\n\n    ],\n    usedLetters: ['.',',',':',';','-','_', \"'\", '\"', '?','!','/','`','~','(',')']\n};\n\nconst alphabetReducer = (state= initState, action) =>{\n    if(action.type === 'CLICKED_LETTER'){\n        let newLettersArray = state.letters.filter(letters => {\n            return action.letter !== letters.letter\n        });\n        return {\n            ...state,\n            letters: newLettersArray\n        }\n    }\n    if(action.type === 'USED_LETTER'){\n        let newUsedLettersArray = [...state.usedLetters, action.letter];\n        return {\n            ...state,\n            usedLetters: newUsedLettersArray,\n        }\n    }\n    return state\n};\n\nexport default alphabetReducer;","\nconst initState = {\n    word: ' ',\n    author: null,\n    lettersToGuess: 0,\n    remainLetters: null,\n    numberOfMistakes: 0,\n};\n\nconst guessWordReducer = (state= initState, action) =>{\n    if(action.type === 'COUNT_LETTERS'){\n        let count = action.count;\n        return {\n            ...state,\n            lettersToGuess: count,\n        }\n    }\n    if(action.type === 'REMAIN_LETTERS'){\n        return{\n            ...state,\n            remainLetters: action.remain,\n        }\n    }\n    if(action.type === 'MISTAKE'){\n        return{\n            ...state,\n            numberOfMistakes: action.mistake,\n        }\n    }\n    if(action.type === 'NEW_WORD'){\n        return {\n            ...state,\n            word: action.quote,\n        }\n    }\n    if(action.type === \"NEW_AUTHOR\"){\n        return {\n            ...state,\n            author: action.author,\n        }\n    }\n    return state\n};\n\nexport default guessWordReducer;","\nconst initState = {\n    start: false,\n\n};\n\nconst startGameReducer = (state= initState, action) => {\n    if (action.type === 'START_GAME') {\n        return {\n            ...state,\n            start: action.start,\n        };\n    }\n    return state\n};\n\nexport default startGameReducer;","\nconst initState = {\n    gameOver: false,\n\n};\n\nconst gameOverReducer = (state= initState, action) => {\n    if (action.type === 'GAME_OVER') {\n        return {\n            ...state,\n            gameOver: action.gameOver,\n        };\n    }\n    return state\n};\n\nexport default gameOverReducer;","import {createStore, combineReducers} from 'redux';\n//import reducers\nimport alphabetReducer from './reducers/alphabetReducer';\nimport guessWordReducer from './reducers/guessWordReducer';\nimport startGameReducer from \"./reducers/startGameReducer\";\nimport gameOverReducer from \"./reducers/gameOverReducer\";\n\nconst appReducer = combineReducers({\n    alphabet : alphabetReducer,\n    guessWord: guessWordReducer,\n    start: startGameReducer,\n    gameOver: gameOverReducer,\n});\n\n\n//restore initial state\nconst rootReducer = (state, action) => {\n    if (action.type === 'NEW_GAME') {\n        state = undefined\n    }\n\n    return appReducer(state, action)\n};\n\nconst store = createStore(\n    rootReducer,\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport {Provider} from 'react-redux';\n\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}